name: ROS2 Main CI

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  full-build-and-test:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-desktop-full

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup ROS2 environment
      shell: bash
      run: |
        source /opt/ros/humble/setup.bash
        echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc
        echo "ROS2 environment setup completed"

    - name: Install dependencies
      shell: bash
      run: |
        apt-get update && apt-get install -y \
          python3-colcon-common-extensions \
          python3-rosdep \
          ros-humble-moveit \
          ros-humble-cv-bridge \
          ros-humble-vision-opencv \
          ros-humble-gazebo-ros-pkgs \
          ros-humble-tf2-geometry-msgs \
          ros-humble-image-transport \
          ros-humble-compressed-image-transport
        echo "Dependencies installed successfully"

    - name: Initialize rosdep
      shell: bash
      run: |
        rosdep init || echo "rosdep already initialized"
        rosdep update
        echo "rosdep initialized and updated"

    - name: Install workspace dependencies
      shell: bash
      run: |
        source /opt/ros/humble/setup.bash
        echo "Installing workspace dependencies with rosdep..."
        rosdep install --from-paths . --ignore-src -r -y --skip-keys="px4_msgs" || true
        echo "Workspace dependencies installed"

    - name: Build ALL packages
      shell: bash
      run: |
        source /opt/ros/humble/setup.bash
        echo "Starting full workspace build..."
        
        # Build all packages except px4_ctrl
        colcon build \
          --packages-ignore px4_ctrl \
          --cmake-args -DCMAKE_BUILD_TYPE=Release \
          --event-handlers console_direct+
        
        # Try to build px4_ctrl separately (allow failure)
        echo "Attempting to build px4_ctrl (may fail due to missing dependencies)..."
        colcon build \
          --packages-select px4_ctrl \
          --cmake-args -DCMAKE_BUILD_TYPE=Release \
          --event-handlers console_direct+ \
          --continue-on-error || echo "px4_ctrl build failed - missing px4_msgs dependency"

    - name: Run comprehensive tests
      shell: bash
      run: |
        source /opt/ros/humble/setup.bash
        
        # Check if install directory exists and source it
        if [ -d "install" ]; then
          source install/setup.bash
          echo "Workspace sourced successfully"
        else
          echo "No install directory found, build may have failed"
          exit 1
        fi
        
        echo "=== COMPREHENSIVE TESTING ==="
        
        # Test 1: Check if packages are available
        echo "1. Checking available packages..."
        ros2 pkg list | grep -E "(panda_moveit_control|my_opencv_package|panda_description|px4_ctrl)" || echo "Some packages not found"
        
        # Test 2: Verify package installations
        echo "2. Verifying package installations..."
        PACKAGES=("panda_moveit_control" "my_opencv_package" "panda_description" "px4_ctrl")
        for pkg in "${PACKAGES[@]}"; do
          if ros2 pkg list | grep -q "$pkg"; then
            echo "‚úÖ $pkg: Found"
            ros2 pkg xml "$pkg" > /dev/null 2>&1 && echo "  - Package XML valid" || echo "  - Package XML invalid"
          else
            echo "‚ùå $pkg: Not found"
          fi
        done
        
        # Test 3: Check executables
        echo "3. Checking available executables..."
        ros2 pkg executables my_opencv_package || echo "No executables found for my_opencv_package"
        ros2 pkg executables px4_ctrl || echo "No executables found for px4_ctrl"
        
        # Test 4: Check launch files
        echo "4. Checking launch files..."
        find install/ -name "*.launch.py" -o -name "*.launch.xml" | head -10 || echo "No launch files found"
        
        # Test 5: Run colcon tests if available
        echo "5. Running colcon tests..."
        colcon test \
          --packages-skip-by-dep px4_msgs \
          --return-code-on-test-failure \
          --event-handlers console_direct+ || echo "Tests completed with warnings/errors"
        
        # Test 6: Generate test report
        echo "6. Generating test report..."
        if [ -d "build" ]; then
          echo "Test results summary:"
          find build/ -name "*.xml" -path "*/test_results/*" | wc -l | xargs echo "XML test files found:"
          find build/ -name "*.log" | head -5 | while read log; do
            echo "Log: $log"
          done
        fi

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-build-logs
        path: |
          log/
          build/*/build.log
          build/*/install.log
          build/*/test_results/
        retention-days: 30

    - name: Upload install artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: install-artifacts
        path: |
          install/
        retention-days: 7

    - name: Generate build summary
      shell: bash
      if: always()
      run: |
        echo "## üîß ROS2 Main CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ROS2 Distribution**: Humble" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "install" ]; then
          echo "### üì¶ Successfully Built Packages:" >> $GITHUB_STEP_SUMMARY
          source /opt/ros/humble/setup.bash
          source install/setup.bash
          ros2 pkg list | grep -E "(panda_moveit_control|my_opencv_package|panda_description|px4_ctrl)" | while read pkg; do
            echo "- $pkg" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "### ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "No install directory found. Check build logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Workspace Statistics:" >> $GITHUB_STEP_SUMMARY
        if [ -d "build" ]; then
          echo "- Build directories: $(ls build/ | wc -l)" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -d "install" ]; then
          echo "- Install directories: $(ls install/ | wc -l)" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify on failure
      if: failure()
      shell: bash
      run: |
        echo "‚ùå Build failed! Check the following:"
        echo "1. Build logs in the 'Build ALL packages' step"
        echo "2. Dependency issues in 'Install workspace dependencies'"
        echo "3. Package.xml files and CMakeLists.txt"
        echo ""
        echo "Common issues:"
        echo "- Missing dependencies in package.xml"
        echo "- CMake configuration errors"
        echo "- Source code compilation errors"
        echo "- Missing include files or libraries"
